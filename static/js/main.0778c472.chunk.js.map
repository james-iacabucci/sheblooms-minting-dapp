{"version":3,"sources":["Config/CollectionConfig.js","assets/background4.png","assets/Logos/SB_Full_White_Padding.png","assets/Logos/SB_Simple_White.png","Components/Header/Header.js","Components/Collection/CollectionInfo.js","Components/App/App.js","index.js","Components/Whitelist/Whitelist.js"],"names":["CollectionConfig","contractName","tokenName","tokenSymbol","hiddenMetadataUri","maxSupply","whitelistSale","price","maxMintAmountPerTx","preSale","publicSale","contractAddress","stakingAddress","tokenAddress","Header","values","data","signOut","setError","processing","setProcessing","nftContractOptions","stakingContractOptions","useMoralis","isAuthenticated","Moralis","account","chain","useChain","newState","a","executeFunction","params","_state","functionName","tx","wait","window","location","reload","console","error","AppBar","position","elevation","sx","backgroundColor","Toolbar","src","logo","alt","style","width","Stack","spacing","direction","alignItems","marginLeft","Chip","variant","color","label","name","Tooltip","title","substring","toUpperCase","slice","formatted","Button","size","onClick","ownerAddress","userAddress","top","bottom","setCollectionPaused","isMintingPaused","withdrawFunds","CollectionInfo","Grid","container","item","xs","Typography","align","saleStage","isWhitelistMintEnabled","isUserInWhitelist","totalSupply","nftWallet","length","join","nftContractAbi","require","abi","defaultState","userBalance","network","networkConfig","tokenPrice","BigNumber","from","earnings","saleStatus","merkleProofManualAddress","merkleProofManualAddressFeedbackMessage","App","chainId","useNativeBalance","useState","mintAmount","setMintAmount","setValues","transaction","setTransaction","transactionCompleted","setTransactionCompleted","contractFound","setContractFound","authenticate","logout","isWeb3Enabled","enableWeb3","isWeb3EnableLoading","msgValue","signIn","providerId","provider","initWallet","log","owner","cost","toNumber","_owner","prevValues","balance","Whitelist","contains","amount","_mintAmount","_merkleProof","getProofForAddress","mul","hash","useEffect","web3Library","initialize","unsubAccountChanged","onAccountChanged","unsubChainChanged","onChainChanged","mintCost","Units","FromWei","isWalletConnected","isSoldOut","isTestNet","MessageCard","props","Card","display","padding","flexDirection","justifyContent","children","openInNewTab","url","open","Container","disableGutters","maxWidth","height","backgroundImage","background","fixed","raised","CardMedia","component","image","CardContent","mt","CardActions","fullWidth","textAlign","fontWeight","message","includes","code","getErrorText","Box","LinearProgress","fontSize","acknowledgeTransaction","Divider","ButtonGroup","Math","max","min","disabled","mintTokens","endIcon","appTheme","createTheme","palette","mode","primary","main","ReactDOM","render","StrictMode","theme","appId","process","serverUrl","document","getElementById","undefined","this","merkleTree","leafNodes","whitelistAddresses","map","addr","keccak256","MerkleTree","sortPairs","address","getMerkleTree","getHexProof","toString","replaceAll","getLeafIndex","Buffer"],"mappings":"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","file":"static/js/main.0778c472.chunk.js","sourcesContent":["const CollectionConfig = {\n  contractName: 'SheBloomsCollection',\n  tokenName: 'She Blooms',\n  tokenSymbol: 'SBNFT',\n  hiddenMetadataUri: 'ipfs://QmPSsZraxSBSk9eYdUQzVXozJQdw8ztG2KmvMuNzeSG6J9/sheblooms_presale.json',\n  maxSupply: 10,\n  whitelistSale: {\n    price: 0.05,\n    maxMintAmountPerTx: 1,\n  },\n  preSale: {\n    price: 0.07,\n    maxMintAmountPerTx: 2,\n  },\n  publicSale: {\n    price: 0.09,\n    maxMintAmountPerTx: 5,\n  },\n  contractAddress: \"0x14ee41128c4733FFC17f60367EEad7d8f6D7d4CD\",\n  //contractAddress: \"0xFFbBbCCC990bf3205467F8Fd3f656aa72F86817a\",\n  stakingAddress: \"0x00D393033DC6a029e2A4952fBd6960A712E02C2f\",\n  tokenAddress: \"0x60A0E01A1AFc273533aE03F8693dce52F8cD0C1b\"\n};\n\nexport default CollectionConfig;\n","export default __webpack_public_path__ + \"static/media/background4.178a6036.png\";","export default __webpack_public_path__ + \"static/media/SB_Full_White_Padding.0db5cf59.png\";","export default __webpack_public_path__ + \"static/media/SB_Simple_White.9893d585.png\";","import * as React from 'react';\n\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport Tooltip from '@mui/material/Tooltip';\n\nimport { useMoralis, useChain } from \"react-moralis\";\nimport logo from \"../../assets/Logos/SB_Simple_White.png\";\n\nexport default function Header({values, data, signOut, setError, processing, setProcessing, nftContractOptions, stakingContractOptions}) {\n  \n  const { isAuthenticated, Moralis, account } = useMoralis();\n  const { chain } = useChain();\n\n  async function setCollectionPaused(newState) {\n    try {\n      const tx = await Moralis.executeFunction({...nftContractOptions, params: { _state: newState }, functionName: 'setPaused' }); \n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function withdrawFunds() {\n    try {\n      const tx = await Moralis.executeFunction({...nftContractOptions, functionName: 'withdraw' }); \n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function setStakingPaused(newState) {\n    try {\n      const tx = await Moralis.executeFunction({...stakingContractOptions, params: { _state: newState }, functionName: 'setPaused' }); \n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n  \n  return (\n    <>\n      <AppBar position=\"fixed\" elevation={2} sx={{ backgroundColor : 'black'}}>\n        <Toolbar>\n          <img src={logo} alt=\"logo\" style={{width: \"200px\"}}/>\n          {account && isAuthenticated && \n            <Stack spacing={1} direction=\"row\" alignItems={\"center\"} sx={{ marginLeft: \"auto\"}}>\n              <Chip variant=\"outlined\" color=\"primary\" label={chain?.name}/>\n              <Tooltip title={account ? account : \"...\"}>\n                <Chip variant=\"outlined\" color=\"primary\" label={`${account?.substring(0,4).toUpperCase()}....${account?.slice(-4).toUpperCase()}`}/>\n              </Tooltip>\n              <Chip variant=\"outlined\" color=\"primary\" label={data?.formatted}/>\n              {isAuthenticated && <Button variant=\"contained\" size=\"small\" onClick={() => signOut()}>Disconnect</Button>}\n            </Stack>\n          }\n        </Toolbar>\n      </AppBar> \n\n\n      {!processing && isAuthenticated && account && (values.ownerAddress === values.userAddress) && \n        <AppBar position=\"fixed\" elevation={2} sx={{ top: 'auto', bottom: 0, backgroundColor : 'white'}}>\n          <Toolbar sx={{ backgroundColor: 'white'}}>  \n            <Stack spacing={1} direction=\"row\">\n              <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => setCollectionPaused((values.isMintingPaused ? false : true))}>{values.isMintingPaused ? \"Resume Minting\" : \"Pause Minting\"}</Button>\n              <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => withdrawFunds()}>Withdraw Funds</Button>\n              {/* <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => setStakingPaused((values.isStakingPaused ? false : true))}>{values.isStakingPaused ? \"Resume Staking\" : \"Pause Staking\"}</Button> */}\n            </Stack>\n          </Toolbar> \n        </AppBar>\n      }\n\n    </>\n\n  );\n}\n","import * as React from 'react';\nimport { Typography, Grid } from '@mui/material';\n\nexport default function CollectionInfo({values}) {\n\n  return (\n    <Grid container spacing={2}>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\">\n          Collection Status\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n          {values.saleStage}\n        </Typography>\n      </Grid>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\">\n          Sale Status\n        </Typography>\n        </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\" >\n          {values.isMintingPaused ? \"Closed\"\n            : values.isWhitelistMintEnabled \n            ? values.isUserInWhitelist ? \"Approved\" : \"Not Approved\"\n            : \"Open\"\n          }\n        </Typography>\n      </Grid>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" >\n          Minting Status\n        </Typography>\n        </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n          {`${values.totalSupply} of ${values.maxSupply}`}\n        </Typography>\n      </Grid>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" >\n          She Blooms Owned\n        </Typography>\n        </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n          {values.nftWallet?.length ? '#' + values.nftWallet?.join(', #') : 'Your Wallet is Empty'}\n        </Typography>\n      </Grid>\n\n    </Grid>\n    );\n}\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { Container, Grid, Stack } from '@mui/material';\nimport { Card, CardMedia, CardContent, CardActions } from '@mui/material';\nimport { LinearProgress } from '@mui/material/';\nimport { Typography, Divider, Button, Chip, ButtonGroup, Box} from '@mui/material/';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\n\nimport { BigNumber } from 'ethers'\nimport { useMoralis, useNativeBalance, useChain } from \"react-moralis\";\n\nimport CollectionConfig from '../../Config/CollectionConfig';\nimport background from \"../../assets/background4.png\";\nimport logo from \"../../assets/Logos/SB_Full_White_Padding.png\";\nimport Header from './../Header/Header';\nimport CollectionInfo from './../Collection/CollectionInfo';\nimport './App.css';\n\nimport Whitelist from './../Whitelist/Whitelist';\nconst nftContractAbi = require('../../Config/SheBloomsCollection.json').abi;\n//const stakingContractAbi = require('../../Config/SheBloomsStaking.json').abi;\n\nconst defaultState = {\n  userAddress: null,\n  userBalance: 0,\n  ownerAddress: null,\n  network: null,\n  networkConfig: null, /// CollectionConfig.mainnet, \n  totalSupply: 0,\n  maxSupply: 0,\n  maxMintAmountPerTx: 0,\n  tokenPrice: BigNumber.from(0),\n  isMintingPaused: null,\n  isWhitelistMintEnabled: false,\n  isUserInWhitelist: false,\n  nftWallet: [],\n  //isStakingPaused: null,\n  //stakingWallet: [],\n  earnings: 0,\n  saleStatus: null,\n  saleStage: null,\n  merkleProofManualAddress: '', \n  merkleProofManualAddressFeedbackMessage: null,\n};\n\nfunction App() {  \n\n  const { chainId } = useChain();\n  const { data } = useNativeBalance()\n  const [ error, setError ] = useState('');\n  const [ mintAmount, setMintAmount ] = useState(1);\n  const [ values, setValues ] = useState(defaultState);\n  const [ processing, setProcessing ] = useState(false);\n  const [ transaction, setTransaction ] = useState(null);\n  const [ transactionCompleted, setTransactionCompleted ] = useState(false);\n  const [ contractFound, setContractFound ] = useState(false);\n  const { authenticate, logout, isWeb3Enabled, enableWeb3, isAuthenticated, isWeb3EnableLoading, account, chain, Moralis } = useMoralis();\n\n  let nftContractOptions = {\n    contractAddress: CollectionConfig.contractAddress,\n    abi: nftContractAbi,\n    functionName: null,\n    msgValue: 0\n  }\n\n  // let stakingContractOptions = {\n  //   contractAddress: CollectionConfig.stakingAddress,\n  //   abi: stakingContractAbi,\n  //   functionName: null,\n  //   msgValue: 0\n  // }\n\n  async function signIn(providerId) {\n    await authenticate({ provider: providerId })\n  }\n\n  async function signOut() {\n    await logout()\n    setValues(() => defaultState)\n  }\n\n  // Retrieve Staking Rewards\n  /*\n  useEffect(() => {\n    setInterval(async () => {\n      try {\n        const earnings = await Moralis.executeFunction({...stakingContractOptions, params: { tokenIds: values.stakingWallet }, functionName: 'earningInfo' });    \n        setValues(prevValues => ({ ...prevValues, earnings: earnings }));   \n      } catch(e) {\n        console.log(e);\n      }\n    }, 60000);\n  }, [values.stakingWallet]);\n  */\n\n  useEffect(() => {\n    async function initialize () {\n      if (isAuthenticated && !isWeb3Enabled && !isWeb3EnableLoading) {\n        await enableWeb3() \n      }\n      if (isAuthenticated && isWeb3Enabled) {\n        console.log('Moralis Library', Moralis ? Moralis.web3Library : null)\n        await initWallet()\n      }\n    } \n    initialize()\n\n    const unsubAccountChanged = Moralis.onAccountChanged(function(account) {\n      console.log(\"Detected an Account Change:\", account);\n      window.location.reload();\n    });\n\n    const unsubChainChanged = Moralis.onChainChanged(function(chain) {\n      console.log(\"Detected a Chain Change:\", chain);\n      window.location.reload();\n    });\n\n    return () => {\n      unsubAccountChanged();\n      unsubChainChanged();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAuthenticated, isWeb3Enabled, account, chain]);\n\n  useEffect(() => {\n    console.log('VALUES', values)\n  }, [values])\n\nasync function initWallet() {\n\n    setProcessing(true);\n\n    setValues(() => defaultState);\n\n    if (!account) {\n      console.log('initWallet: account is null. exiting...')\n      return;\n    }\n    \n    let owner = null;\n    let maxSupply = 0;\n    let totalSupply = 0;\n    let maxMintAmountPerTx = 0;\n    let cost = 0;\n    let isMintingPaused = true;\n    let isWhitelistMintEnabled = false;\n    let nftWallet = null;\n\n    // COLLECTION PROPERTIES\n    try {\n      owner = await Moralis.executeFunction({...nftContractOptions,  functionName: 'owner' });\n      maxSupply = (await Moralis.executeFunction({...nftContractOptions,  functionName: 'maxSupply' }))?.toNumber();\n      totalSupply = (await Moralis.executeFunction({...nftContractOptions,  functionName: 'totalSupply' }))?.toNumber();\n      maxMintAmountPerTx = (await Moralis.executeFunction({...nftContractOptions,  functionName: 'maxMintAmountPerTx' }))?.toNumber();\n      cost = await Moralis.executeFunction({...nftContractOptions,  functionName: 'cost' });\n      isMintingPaused = await Moralis.executeFunction({...nftContractOptions,  functionName: 'paused' });\n      isWhitelistMintEnabled = await Moralis.executeFunction({...nftContractOptions,  functionName: 'whitelistMintEnabled' });\n      nftWallet = await Moralis.executeFunction({...nftContractOptions, params: { _owner: account }, functionName: 'walletOfOwner' });\n    } \n    catch(e) {\n      console.error(e)\n      setContractFound(false);\n      setProcessing(false); \n      return\n    }\n    \n    // STAKING PROPERTIES\n    //const stakingWallet = await Moralis.executeFunction({...stakingContractOptions, params: { account: account }, functionName: 'tokensOfOwner' });\n    //const isStakingPaused = await Moralis.executeFunction({...stakingContractOptions, functionName: 'paused' });\n\n    setValues(prevValues => ({\n      ...prevValues,\n      userAddress: account.toUpperCase(),\n      ownerAddress: owner.toUpperCase(),\n      userBalance: data?.balance,\n      maxSupply: maxSupply,\n      totalSupply: totalSupply,\n      maxMintAmountPerTx: maxMintAmountPerTx,\n      tokenPrice: cost,\n      isMintingPaused: isMintingPaused,\n      saleStage: isWhitelistMintEnabled ? \"Gold List Only\" : \"Public Sale\",\n      saleStatus: isMintingPaused ? \"Closed\" : \"Open\",  \n      isWhitelistMintEnabled: isWhitelistMintEnabled,\n      isUserInWhitelist: Whitelist.contains(account ?? ''),\n      nftWallet: nftWallet,\n      //isStakingPaused: isStakingPaused,\n      //stakingWallet: stakingWallet,\n    }));\n\n    setContractFound(true);\n    setProcessing(false); \n  }\n\n  // COLLECTION FUNCTIONS\n\n  async function mintTokens(amount) {\n    try {\n      let tx;\n      values.isWhitelistMintEnabled\n        ? tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount, _merkleProof: Whitelist.getProofForAddress(account) }, msgValue: values.tokenPrice.mul(amount), functionName: 'whitelistMint' })\n        : tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount }, msgValue: values.tokenPrice.mul(amount), functionName: 'mint' }); \n      setTransaction(tx.hash);\n      setTransactionCompleted(false)\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      setTransactionCompleted(true);\n    } \n    catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function whitelistMintTokens(amount) {\n    try {\n      //const tx = await this.contract.whitelistMint(amount, Whitelist.getProofForAddress(this.state.userAddress!), {value: this.state.tokenPrice.mul(amount)});\n      const tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount, _merkleProof: Whitelist.getProofForAddress(account) }, msgValue: values.tokenPrice.mul(amount), functionName: 'whitelistMint' }); \n      setTransaction(tx.hash);\n      setTransactionCompleted(false)\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      setTransactionCompleted(true);\n    } catch (e) {\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  function incrementMintAmount() {\n    setMintAmount(Math.min(values.maxMintAmountPerTx, mintAmount + 1));\n  }\n\n  function decrementMintAmount() {\n    setMintAmount(Math.max(1, mintAmount - 1));\n  }\n\n  function acknowledgeError() {\n    setError(null);\n  }\n  async function acknowledgeTransaction() {\n    setTransaction(null);\n    setTransactionCompleted(false);\n    await initWallet();\n  }\n\n  function getErrorText() {\n    if (error.message.includes('Address already claimed!')) {\n      return \"Your wallet address has already claimed and minted its Gold List NFT\"\n    }\n    if (error.message.includes('Invalid proof!')) {\n      return \"Your wallet address is not approved for Gold List minting.\"\n    }\n\n    switch(error.code) {\n      case \"INSUFFICIENT_FUNDS\": return \"Your wallet does not have enough ETH to complete this purchase.\"\n      case 4001: return \"This transaction has been canceled at your request.\"\n      case 32603: return error.message\n      default: return `An error has occurred while processing your transaction (${error.code})`\n    }\n  }\n\n  //const isNothingStaked = values.stakingWallet?.length === 0;\n  //const isNothingOwned = values.nftWallet?.length === 0;\n  const mintCost = Moralis.Units.FromWei(values.tokenPrice, 18) * mintAmount;\n  const isWalletConnected = () => (account !== null) && isAuthenticated;\n  const isSoldOut = () => values.maxSupply !== 0 && values.totalSupply >= values.maxSupply;\n  const isMainNet = () => chainId === \"0x1\";\n  const isTestNet = () => chainId === \"0x4\"; \n  const isPurchaseEnabled = () => isWalletConnected() && !isSoldOut() && !values.isMintingPaused && contractFound;\n\n  function MessageCard(props) {\n    return (\n      <Card sx={{\n        position: \"relative\",\n        display: \"flex\",\n        padding: '1em',\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        backgroundColor: props.backgroundColor ? props.backgroundColor : \"black\",\n        alignItems: \"center\"}}\n      >\n        {props.children}\n      </Card>        \n    )\n  };\n\n  function openInNewTab(url) {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <Container disableGutters maxWidth=\"false\" >\n      <Header \n        values={values}\n        data={data}\n        signOut={signOut} \n        setError={setError}\n        processing={processing}\n        setProcessing={setProcessing}\n        //stakingContractOptions={stakingContractOptions}\n        nftContractOptions={nftContractOptions}\n      />\n      <div style={{\n        position: \"relative\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundImage: `url(${background})`\n        }}\n      >\n      <Container fixed={true} maxWidth=\"xs\">\n        <Stack spacing={2}> \n          \n          <Card raised={true}>\n\n            <CardMedia component=\"img\" image={logo} alt=\"She Blooms\" sx={{backgroundColor: \"black\" }}/>\n\n            {!processing && !isWalletConnected() && \n              <>\n                <CardContent mt={2}>\n                  <Typography variant=\"body2\" align='center'>Please connect your Ethereum wallet to continue.</Typography> \n                </CardContent>\n                <CardActions>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => signIn(\"metamask\")}>Metamask</Button>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => signIn(\"walletconnect\")}>WalletConnect</Button>\n                </CardActions>\n              </>\n            }\n\n            {!processing && isWalletConnected() && !contractFound &&\n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"body2\" textAlign={'center'} >Something went wrong!</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >The She Blooms smart contract could not be found.</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >Please make sure your wallet is connected to the Ethereum MainNet.</Typography>\n                </Stack>\n              </CardContent>\n            }\n\n            {!processing && error && \n              <>\n                <CardContent mt={2}>\n                  <Stack spacing={2}>\n                    <Typography variant=\"h5\" fontWeight='bold' align='center'>Something Went Wrong!</Typography> \n                    <Typography variant=\"body2\" align='center'>{getErrorText()}</Typography> \n                  </Stack>\n                </CardContent>\n                <CardActions>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => acknowledgeError()}>OK</Button>\n                </CardActions>\n              </>\n            }\n\n            {processing && !transaction && \n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"body2\" textAlign={'center'} >Loading She Blooms Collection...</Typography>  \n                  <Box sx={{ width: '100%' }}><LinearProgress /></Box>\n                </Stack>\n              </CardContent>\n            }\n\n            {processing && transaction && !transactionCompleted &&\n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"h5\" fontWeight='bold' align='center' >Processing Your Transaction</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >Your transaction has been submitted to the Ethereum Network and is waiting to be confirmed!</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >Your screen will automatically be refreshed when the transaction is completed. This may take up to 5 minutes to complete, so please be patient.</Typography>\n                  <Chip sx={{ fontSize: 9 }} label={transaction}/>\n                  <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth size=\"small\" onClick={() => openInNewTab(`https://${isTestNet() ? \"rinkeby.\" : \"\"}etherscan.io/tx/${transaction}`)}>View your transaction on EtherScan</Button>\n                  <Box mt={2} sx={{ width: '100%' }}><LinearProgress /></Box>\n                </Stack>\n              </CardContent>\n            }\n\n            {!processing && transactionCompleted && \n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"h5\" fontWeight='bold' align='center' >Congratulations!</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >You transaction has been confirmed!</Typography>\n                  <Chip variant=\"outlined\" sx={{ fontSize: 9 }} label={transaction}/>\n                  <Button variant=\"outlined\" fullWidth size=\"small\" onClick={() => openInNewTab(`https://${isTestNet() ? \"rinkeby.\" : \"\"}etherscan.io/tx/${transaction}`)}>View your transaction on EtherScan</Button>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => acknowledgeTransaction()}>OK</Button>\n                </Stack>\n              </CardContent>\n            }            \n\n            {/* COLLECTION INFORMATION */}\n            {!processing && isWalletConnected() && contractFound && !error && !transactionCompleted &&\n              <CardContent mt={2}>\n                <CollectionInfo values={values}/>\n              </CardContent>\n            }\n            \n            <Divider />\n\n            {/* MINTING CONTROLS */}\n            {!processing && isPurchaseEnabled() && !error && !transactionCompleted && \n              <CardContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={4}>\n                    <ButtonGroup variant=\"contained\">\n                      <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth onClick={() => decrementMintAmount()}>-</Button>\n                      <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth>{`${mintAmount}`}</Button>\n                      <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth onClick={() => incrementMintAmount()}>+</Button>\n                    </ButtonGroup>\n                  </Grid>\n                  <Grid item xs={4} sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>\n                    <Typography mt={0.5} variant=\"body2\" fontSize={\"1rem\"} fontWeight={'bold'} color=\"primary\">\n                      {`${mintCost} ETH`}\n                    </Typography>\n                    <Typography mt={-0.5} fontSize={10}>\n                      (plus gas)\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Button fullWidth variant='contained' sx={{ color: 'white'}} disabled={values.isMintingPaused} onClick={() => mintTokens(mintAmount)} endIcon={<ArrowForwardIcon />}>Mint</Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            }\n\n          </Card>\n\n          {/* ADDITIONAL INFO/ALERT CARDS FOR VARIOUS CONDITIONS */}\n          \n          {!processing && values.isMintingPaused && contractFound &&\n            <MessageCard>\n              <Typography variant=\"body2\" color='primary' align='center'>This sale is closed. Please come back for our next sale!</Typography>\n            </MessageCard>   \n          }       \n\n          {!processing && isSoldOut() && contractFound &&\n            <MessageCard>\n              <Typography variant=\"body2\" color='primary' align='center'>Thank you for your support!</Typography>\n              <Typography variant=\"body2\" color='primary' align='center'>Our current sale is sold out, but please come back for out next sale!</Typography>\n            </MessageCard>\n          }   \n\n          {!processing && !isMainNet() && \n            <MessageCard>\n              <Typography variant=\"body2\" color='orange' align='center'>You are not connected to the Ethereum MainNet.</Typography>\n              <Typography variant=\"body2\" color='orange' align='center'>Please connect to continue...</Typography>\n            </MessageCard>\n          }       \n \n        </Stack>\n      </Container>\n    </div>\n  </Container>\n\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\nimport { createTheme } from '@mui/material/styles';\nimport { MoralisProvider } from \"react-moralis\";\nimport App from './Components/App/App';\nimport './index.css';\n\nconst appTheme = createTheme({ \n  palette: { \n    mode: 'light',\n    primary: {\n      main: '#42a5f5', \n    } \n  }\n});\n\nconst APP_ID = process.env.REACT_APP_MORALIS_APPLICATION_ID;\nconst SERVER_URL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={appTheme}>\n      <MoralisProvider appId={APP_ID} serverUrl={SERVER_URL}>\n        <App />\n      </MoralisProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import whitelistAddresses from '../../Config/whitelist.json';\nimport { MerkleTree } from 'merkletreejs';\nimport keccak256 from 'keccak256';\n\nexport default new class Whitelist {\n  merkleTree\n\n  getMerkleTree()\n  {\n    if (this.merkleTree === undefined) {\n      const leafNodes = whitelistAddresses.map(addr => keccak256(addr));\n      this.merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });\n    }\n    return this.merkleTree;\n  }\n\n  getProofForAddress(address)\n  {\n    return this.getMerkleTree().getHexProof(keccak256(address));\n  }\n\n  getRawProofForAddress(address)\n  {\n    return this.getProofForAddress(address).toString().replaceAll('\\'', '').replaceAll(' ', '');\n  }\n\n  contains(address)\n  {\n    return this.getMerkleTree().getLeafIndex(Buffer.from(keccak256(address))) >= 0;\n  }\n};"],"sourceRoot":""}