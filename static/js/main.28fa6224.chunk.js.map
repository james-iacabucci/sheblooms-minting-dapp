{"version":3,"sources":["assets/Logos/SB_Simple_White.png","Config/CollectionConfig.js","Components/Header/Header.js","assets/background4.png","assets/Logos/SB_Full_White_Padding.png","Components/Collection/CollectionInfo.js","Components/App/App.js","index.js","Components/SpecialLists/Freelist.js","Components/SpecialLists/Goldlist.js"],"names":["CollectionConfig","contractName","contractAddress","openSeaURL","stakingAddress","tokenAddress","Header","values","data","signOut","setError","isTestNet","processing","setProcessing","nftContractOptions","stakingContractOptions","useMoralis","isAuthenticated","Moralis","account","chain","useChain","openInNewTab","url","window","open","newState","a","executeFunction","params","_state","functionName","tx","wait","location","reload","console","error","AppBar","position","elevation","sx","backgroundColor","Toolbar","Link","cursor","onClick","src","logo","alt","style","width","Stack","spacing","direction","alignItems","marginLeft","Chip","variant","color","label","name","display","xs","md","Tooltip","title","substring","toUpperCase","slice","sm","formatted","Button","size","ownerAddress","userAddress","top","bottom","setCollectionPaused","isMintingPaused","withdrawFunds","CollectionInfo","Grid","container","item","Typography","align","saleStage","isReleased","maxSupply","totalSupply","isFreelistMintEnabled","isGoldlistMintEnabled","isUserInFreelist","isUserInGoldlist","nftWallet","length","join","nftContractAbi","require","abi","defaultState","userBalance","network","networkConfig","maxMintAmountPerTx","tokenPrice","BigNumber","from","isPreSaleMintEnabled","earnings","merkleProofManualAddress","merkleProofManualAddressFeedbackMessage","App","chainId","useNativeBalance","useState","mintAmount","setMintAmount","setValues","transaction","setTransaction","transactionCompleted","setTransactionCompleted","contractFound","setContractFound","authenticate","logout","isWeb3Enabled","enableWeb3","isWeb3EnableLoading","msgValue","signIn","providerId","provider","initWallet","log","owner","cost","toNumber","_owner","prevValues","balance","Freelist","contains","Goldlist","amount","_mintAmount","_merkleProof","getProofForAddress","mul","hash","useEffect","web3Library","initialize","unsubAccountChanged","onAccountChanged","unsubChainChanged","onChainChanged","mintCost","Units","FromWei","isWalletConnected","isSoldOut","isMainNet","MessageCard","props","Card","padding","flexDirection","justifyContent","children","Container","disableGutters","maxWidth","height","backgroundImage","background","fixed","overflow","raised","CardMedia","component","image","CardContent","mt","CardActions","fullWidth","textAlign","fontWeight","message","includes","code","getErrorText","Box","LinearProgress","fontSize","acknowledgeTransaction","Divider","ButtonGroup","Math","max","min","mintTokens","endIcon","appTheme","createTheme","palette","mode","primary","main","ReactDOM","render","StrictMode","theme","appId","process","serverUrl","document","getElementById","undefined","this","merkleTree","leafNodes","freelistAddresses","map","addr","keccak256","MerkleTree","sortPairs","address","getMerkleTree","getHexProof","toString","replaceAll","getLeafIndex","Buffer","goldlistAddresses"],"mappings":"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","file":"static/js/main.28fa6224.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SB_Simple_White.9893d585.png\";","const CollectionConfig = {\n  contractName: 'SheBloomsCollection',\n  contractAddress: \"0x0fd8a8AEbcdE4b8612c1332DA6462d2de3614cB8\",\n  openSeaURL: \"opensea.io/collection/she-blooms-jdtbrk6b4p\",\n  //contractAddress: \"0xFFbBbCCC990bf3205467F8Fd3f656aa72F86817a\",\n  stakingAddress: \"0x00D393033DC6a029e2A4952fBd6960A712E02C2f\",\n  tokenAddress: \"0x60A0E01A1AFc273533aE03F8693dce52F8cD0C1b\"\n};\n\nexport default CollectionConfig;\n","import * as React from 'react';\n\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Chip from '@mui/material/Chip';\nimport Link from '@mui/material/Link';\nimport Tooltip from '@mui/material/Tooltip';\n\nimport { useMoralis, useChain } from \"react-moralis\";\nimport logo from \"../../assets/Logos/SB_Simple_White.png\";\nimport CollectionConfig from '../../Config/CollectionConfig';\n\nexport default function Header({values, data, signOut, setError, isTestNet, processing, setProcessing, nftContractOptions, stakingContractOptions}) {\n  \n  const { isAuthenticated, Moralis, account } = useMoralis();\n  const { chain } = useChain();\n\n  function openInNewTab(url) {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n\n  async function setCollectionPaused(newState) {\n    try {\n      const tx = await Moralis.executeFunction({...nftContractOptions, params: { _state: newState }, functionName: 'setPaused' }); \n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function withdrawFunds() {\n    try {\n      const tx = await Moralis.executeFunction({...nftContractOptions, functionName: 'withdraw' }); \n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function setStakingPaused(newState) {\n    try {\n      const tx = await Moralis.executeFunction({...stakingContractOptions, params: { _state: newState }, functionName: 'setPaused' }); \n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n  \n  return (\n    <>\n      <AppBar position=\"fixed\" elevation={2} sx={{ backgroundColor : 'black'}}>\n        <Toolbar>\n          <Link sx={{ cursor: 'pointer' }} onClick={() => openInNewTab(\"https://shebloomsnft.io\")}>\n            <img src={logo} alt=\"logo\" style={{width: \"200px\"}}/>\n          </Link>\n          {account && isAuthenticated && \n            <Stack spacing={1} direction=\"row\" alignItems={\"center\"} sx={{ marginLeft: \"auto\"}}>\n              <Chip variant=\"outlined\" color=\"primary\" label={chain?.name} sx={{ display: { xs: 'none', md: 'flex'}}}/>\n              <Tooltip title={account ? account : \"...\"}>\n                <Chip variant=\"outlined\" color=\"primary\" label={`${account?.substring(0,4).toUpperCase()}....${account?.slice(-4).toUpperCase()}`} sx={{ display: { xs: 'none', sm: 'flex' }}}/>\n              </Tooltip>\n              <Chip variant=\"outlined\" color=\"primary\" label={data?.formatted} sx={{ display: { xs: 'none', sm: 'flex' }}} />\n              {isAuthenticated && <Button variant=\"contained\" size=\"small\" onClick={() => signOut()} >Disconnect</Button>}\n            </Stack>\n          }\n        </Toolbar>\n      </AppBar> \n\n\n      {!processing && isAuthenticated && account && (values.ownerAddress === values.userAddress) && \n        <AppBar position=\"fixed\" elevation={2} sx={{ top: 'auto', bottom: 0, backgroundColor : 'white'}}>\n          <Toolbar sx={{ backgroundColor: 'white'}}>  \n            <Stack spacing={1} direction=\"row\">  \n              <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => setCollectionPaused((values.isMintingPaused ? false : true))}>{values.isMintingPaused ? \"Resume Minting\" : \"Pause Minting\"}</Button>\n              <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => withdrawFunds()}>Withdraw Funds</Button>\n              <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => openInNewTab(`https://${isTestNet() ? \"rinkeby.\" : \"\"}etherscan.io/address/${nftContractOptions.contractAddress}`)}>View Contract</Button>\n              {/* <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => setStakingPaused((values.isStakingPaused ? false : true))}>{values.isStakingPaused ? \"Resume Staking\" : \"Pause Staking\"}</Button> */}\n            </Stack>\n          </Toolbar> \n        </AppBar>\n      }\n\n    </>\n\n  );\n}\n","export default __webpack_public_path__ + \"static/media/background4.178a6036.png\";","export default __webpack_public_path__ + \"static/media/SB_Full_White_Padding.0db5cf59.png\";","import * as React from 'react';\nimport { Typography, Grid } from '@mui/material';\n\nexport default function CollectionInfo({values}) {\n\n  return (\n    <Grid container spacing={2}>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\">\n          Sale Type\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n          {`${values.saleStage} ${ !values.isReleased ? \"(Test)\" : \"\" }`}\n        </Typography>\n      </Grid>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\">\n          Sale Status\n        </Typography>\n        </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\" >\n         {(values.maxSupply === values.totalSupply) \n            ? \"Sold Out\" \n            : values.isMintingPaused \n              ? \"Closed\" \n              : !(values.isFreelistMintEnabled || values.isGoldlistMintEnabled) \n                ? \"Open\" \n                : (values.isFreelistMintEnabled && values.isUserInFreelist) || (values.isGoldlistMintEnabled && values.isUserInGoldlist) \n                  ? \"Approved\" \n                  : \"Not Approved\"\n         }\n        </Typography>\n      </Grid>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" >\n          Minting Status\n        </Typography>\n        </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n          {`${values.totalSupply} of ${values.maxSupply}`}\n        </Typography>\n      </Grid>\n\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" >\n          She Blooms Owned\n        </Typography>\n        </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n          {values.nftWallet?.length ? '#' + values.nftWallet?.join(', #') : 'Your Wallet is Empty'}\n        </Typography>\n      </Grid>\n\n    </Grid>\n    );\n}\n","// REACT LIBRARIES \nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n// UI LIBRARIES\nimport { Container, Grid, Stack } from '@mui/material';\nimport { Card, CardMedia, CardContent, CardActions } from '@mui/material';\nimport { LinearProgress } from '@mui/material/';\nimport { Typography, Divider, Button, Chip, ButtonGroup, Box} from '@mui/material/';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport ConfettiExplosion from 'react-confetti-explosion';\n\n// WEB3 LIBRARIES\nimport Freelist from './../SpecialLists/Freelist';\nimport Goldlist from './../SpecialLists/Goldlist';\nimport { BigNumber } from 'ethers'\nimport { useMoralis, useNativeBalance, useChain } from \"react-moralis\";\n//const stakingContractAbi = require('../../Config/SheBloomsStaking.json').abi;\n\n// DAPP COMPONENTS\nimport Header from './../Header/Header';\nimport background from \"../../assets/background4.png\";\nimport logo from \"../../assets/Logos/SB_Full_White_Padding.png\";\nimport CollectionConfig from '../../Config/CollectionConfig';\nimport CollectionInfo from './../Collection/CollectionInfo';\n\nconst nftContractAbi = require('../../Config/SheBloomsCollection.json').abi;\n\nconst defaultState = {\n  userAddress: null,\n  userBalance: 0,\n  ownerAddress: null,\n  network: null,\n  networkConfig: null, /// CollectionConfig.mainnet, \n  totalSupply: 0,\n  maxSupply: 0,\n  maxMintAmountPerTx: 0,\n  tokenPrice: BigNumber.from(0),\n  isMintingPaused: null,\n  isFreelistMintEnabled: false,\n  isGoldlistMintEnabled: false,\n  isPreSaleMintEnabled: false,\n  isUserInFreelist: false,\n  isUserInGoldlist: false,\n  nftWallet: [],\n  //isStakingPaused: null,\n  //stakingWallet: [],\n  isReleased: false,\n  earnings: 0,\n  saleStage: null,\n  merkleProofManualAddress: '', \n  merkleProofManualAddressFeedbackMessage: null,\n};\n\nfunction App() {  \n\n  const { chainId } = useChain();\n  const { data } = useNativeBalance()\n  const [ error, setError ] = useState('');\n  const [ mintAmount, setMintAmount ] = useState(1);\n  const [ values, setValues ] = useState(defaultState);\n  const [ processing, setProcessing ] = useState(false);\n  const [ transaction, setTransaction ] = useState(null);\n  const [ transactionCompleted, setTransactionCompleted ] = useState(false);\n  const [ contractFound, setContractFound ] = useState(false);\n  const { authenticate, logout, isWeb3Enabled, enableWeb3, isAuthenticated, isWeb3EnableLoading, account, chain, Moralis } = useMoralis();\n\n  let nftContractOptions = {\n    contractAddress: CollectionConfig.contractAddress,\n    abi: nftContractAbi,\n    functionName: null,\n    msgValue: 0\n  }\n\n  // let stakingContractOptions = {\n  //   contractAddress: CollectionConfig.stakingAddress,\n  //   abi: stakingContractAbi,\n  //   functionName: null,\n  //   msgValue: 0\n  // }\n\n  async function signIn(providerId) {\n    await authenticate({ provider: providerId })\n  }\n\n  async function signOut() {\n    await logout()\n    setValues(() => defaultState)\n  }\n\n  /*  Retrieve Staking Rewards\n  useEffect(() => {\n    setInterval(async () => {\n      try {\n        const earnings = await Moralis.executeFunction({...stakingContractOptions, params: { tokenIds: values.stakingWallet }, functionName: 'earningInfo' });    \n        setValues(prevValues => ({ ...prevValues, earnings: earnings }));   \n      } catch(e) {\n        console.log(e);\n      }\n    }, 60000);\n  }, [values.stakingWallet]);\n  */\n\n  useEffect(() => {\n    async function initialize () {\n      if (isAuthenticated && !isWeb3Enabled && !isWeb3EnableLoading) {\n        await enableWeb3() \n      }\n      if (isAuthenticated && isWeb3Enabled) {\n        console.log('Moralis Library', Moralis ? Moralis.web3Library : null)\n        await initWallet()\n      }\n    } \n    initialize()\n\n    const unsubAccountChanged = Moralis.onAccountChanged(function(account) {\n      console.log(\"Detected an Account Change:\", account);\n      window.location.reload();\n    });\n\n    const unsubChainChanged = Moralis.onChainChanged(function(chain) {\n      console.log(\"Detected a Chain Change:\", chain);\n      window.location.reload();\n    });\n\n    return () => {\n      unsubAccountChanged();\n      unsubChainChanged();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAuthenticated, isWeb3Enabled, account, chain]);\n\n  useEffect(() => {\n    console.log('VALUES', values)\n  }, [values])\n\nasync function initWallet() {\n\n    setProcessing(true);\n\n    setValues(() => defaultState);\n\n    if (!account) {\n      console.log('initWallet: account is null. exiting...')\n      return;\n    }\n    \n    let owner = null;\n    let maxSupply = 0;\n    let totalSupply = 0;\n    let maxMintAmountPerTx = 0;\n    let cost = 0;\n    let isMintingPaused = true;\n    let isFreelistMintEnabled = false;\n    let isGoldlistMintEnabled = false;\n    let isPreSaleMintEnabled = false;\n    let nftWallet = null;\n    let isReleased = false;\n\n    // COLLECTION PROPERTIES\n    try {\n      owner = await Moralis.executeFunction({...nftContractOptions,  functionName: 'owner' });\n      maxSupply = (await Moralis.executeFunction({...nftContractOptions,  functionName: 'maxSupply' }))?.toNumber();\n      totalSupply = (await Moralis.executeFunction({...nftContractOptions,  functionName: 'totalSupply' }))?.toNumber();\n      maxMintAmountPerTx = (await Moralis.executeFunction({...nftContractOptions,  functionName: 'maxMintAmountPerTx' }))?.toNumber();\n      cost = await Moralis.executeFunction({...nftContractOptions,  functionName: 'cost' });\n      isMintingPaused = await Moralis.executeFunction({...nftContractOptions,  functionName: 'paused' });\n      isFreelistMintEnabled = await Moralis.executeFunction({...nftContractOptions,  functionName: 'freeListMintEnabled' });\n      isGoldlistMintEnabled = await Moralis.executeFunction({...nftContractOptions,  functionName: 'goldListMintEnabled' });\n      isPreSaleMintEnabled = await Moralis.executeFunction({...nftContractOptions,  functionName: 'preSaleMintEnabled' });\n      isReleased = await Moralis.executeFunction({...nftContractOptions,  functionName: 'released' });\n      nftWallet = await Moralis.executeFunction({...nftContractOptions, params: { _owner: account }, functionName: 'walletOfOwner' });\n    } \n    catch(e) {\n      console.error(e)\n      setContractFound(false);\n      setProcessing(false); \n      return\n    }\n    \n    // STAKING PROPERTIES\n    //const stakingWallet = await Moralis.executeFunction({...stakingContractOptions, params: { account: account }, functionName: 'tokensOfOwner' });\n    //const isStakingPaused = await Moralis.executeFunction({...stakingContractOptions, functionName: 'paused' });\n\n    setValues(prevValues => ({\n      ...prevValues,\n      userAddress: account.toUpperCase(),\n      ownerAddress: owner.toUpperCase(),\n      userBalance: data?.balance,\n      maxSupply: maxSupply,\n      totalSupply: totalSupply,\n      maxMintAmountPerTx: maxMintAmountPerTx,\n      tokenPrice: cost,\n      isMintingPaused: isMintingPaused,\n      saleStage: isFreelistMintEnabled ? \"Free List Only\" : isGoldlistMintEnabled ? \"Gold List Only\" : isPreSaleMintEnabled ? \"Pre Sale\" : \"Public Sale\",\n      isFreelistMintEnabled: isFreelistMintEnabled,\n      isGoldlistMintEnabled: isGoldlistMintEnabled,\n      isPreSaleMintEnabled: isPreSaleMintEnabled,\n      isUserInFreelist: Freelist.contains(account ?? ''),\n      isUserInGoldlist: Goldlist.contains(account ?? ''),\n      isReleased: isReleased,\n      nftWallet: nftWallet,\n      //isStakingPaused: isStakingPaused,\n      //stakingWallet: stakingWallet,\n    }));\n\n    setContractFound(true);\n    setProcessing(false); \n  }\n\n  // COLLECTION FUNCTIONS\n\n  async function mintTokens(amount) {\n    try {\n      let tx;\n      values.isFreelistMintEnabled\n        ? tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount, _merkleProof: Freelist.getProofForAddress(account) }, msgValue: values.tokenPrice.mul(amount), functionName: 'freeListMint' })\n        : values.isGoldlistMintEnabled\n          ? tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount, _merkleProof: Goldlist.getProofForAddress(account) }, msgValue: values.tokenPrice.mul(amount), functionName: 'goldListMint' })\n          : tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount }, msgValue: values.tokenPrice.mul(amount), functionName: 'mint' }); \n      setTransaction(tx.hash);\n      setTransactionCompleted(false)\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      setTransactionCompleted(true);\n    } \n    catch (e) {\n      console.error(e)\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  /*\n  async function whitelistMintTokens(amount) {\n    try {\n      //const tx = await this.contract.whitelistMint(amount, Whitelist.getProofForAddress(this.state.userAddress!), {value: this.state.tokenPrice.mul(amount)});\n      const tx = await Moralis.executeFunction({...nftContractOptions, params: { _mintAmount: amount, _merkleProof: Whitelist.getProofForAddress(account) }, msgValue: values.tokenPrice.mul(amount), functionName: 'whitelistMint' }); \n      setTransaction(tx.hash);\n      setTransactionCompleted(false)\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      setTransactionCompleted(true);\n    } catch (e) {\n      setError(e);\n      setProcessing(false);\n    }\n  }\n  */\n\n  function incrementMintAmount() {\n    setMintAmount(Math.min(values.maxMintAmountPerTx, mintAmount + 1));\n  }\n\n  function decrementMintAmount() {\n    setMintAmount(Math.max(1, mintAmount - 1));\n  }\n\n  function acknowledgeError() {\n    setError(null);\n  }\n  async function acknowledgeTransaction() {\n    setTransaction(null);\n    setTransactionCompleted(false);\n    await initWallet();\n  }\n\n  function getErrorText() {\n    if (error.message.includes('Your address has already claimed')) \n      return `Your wallet address has already claimed and minted its ${values.saleStage} NFT`\n    if (error.message.includes('This is an invalid')) \n      return \"Your wallet address is not approved for Gold List minting.\"\n    if (error.message.includes('maximum supply')) \n      return \"There are not enough NFTs left to complete your purchase.\"\n\n    switch(error.code) {\n      case \"INSUFFICIENT_FUNDS\": return \"Your wallet does not have enough ETH to complete this purchase.\"\n      case 4001: return \"This transaction has been canceled at your request.\"\n      case 32603: return error.message\n      default: return `An error has occurred while processing your transaction (${error.code})`\n    }\n  }\n\n  //const isNothingStaked = values.stakingWallet?.length === 0;\n  //const isNothingOwned = values.nftWallet?.length === 0;\n  const mintCost = Moralis.Units.FromWei(values.tokenPrice, 18) * mintAmount;\n  const isWalletConnected = () => (account !== null) && isAuthenticated;\n  const isSoldOut = () => values.maxSupply !== 0 && values.totalSupply >= values.maxSupply;\n  const isMainNet = () => chainId === \"0x1\";\n  const isTestNet = () => chainId === \"0x4\"; \n  const isPurchaseEnabled = () => isWalletConnected() && !isSoldOut() && !values.isMintingPaused && contractFound && ((values.isReleased && isMainNet()) || (!values.isReleased && !isMainNet()));\n\n  function MessageCard(props) {\n    return (\n      <Card sx={{\n        position: \"relative\",\n        display: \"flex\",\n        padding: '1em',\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        backgroundColor: props.backgroundColor ? props.backgroundColor : \"black\",\n        alignItems: \"center\"}}\n      >\n        {props.children}\n      </Card>        \n    )\n  };\n\n  function openInNewTab(url) {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <Container disableGutters maxWidth=\"false\" >\n      <Header \n        values={values}\n        data={data}\n        signOut={signOut} \n        isTestNet={isTestNet}\n        setError={setError}\n        processing={processing}\n        setProcessing={setProcessing}\n        //stakingContractOptions={stakingContractOptions}\n        nftContractOptions={nftContractOptions}\n      />\n      <div style={{\n        position: \"relative\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundImage: `url(${background})`\n        }}\n      >\n      <Container fixed={true} maxWidth=\"xs\">\n        <Stack spacing={2} sx={{ overflow: 'visible' }}> \n          \n          <Card raised={true} sx={{ overflow: 'visible' }}>\n\n            <CardMedia component=\"img\" image={logo} alt=\"She Blooms\" sx={{backgroundColor: \"black\" }}/>\n\n            {!processing && !isWalletConnected() && \n              <>\n                <CardContent mt={2}>\n                  <Typography variant=\"body2\" align='center'>Please connect your Ethereum wallet to continue.</Typography> \n                </CardContent>\n                <CardActions>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => signIn(\"metamask\")}>Metamask</Button>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => signIn(\"walletconnect\")}>WalletConnect</Button>\n                </CardActions>\n              </>\n            }\n\n            {!processing && isWalletConnected() && !contractFound &&\n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"body2\" textAlign={'center'} >Something went wrong!</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >The She Blooms smart contract could not be found.</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >Please make sure your wallet is connected to the Ethereum MainNet.</Typography>\n                </Stack>\n              </CardContent>\n            }\n\n            {!processing && error && \n              <>\n                <CardContent mt={2}>\n                  <Stack spacing={2}>\n                    <Typography variant=\"h5\" color='primary' fontWeight='bold' align='center'>Something Went Wrong!</Typography> \n                    <Typography variant=\"body2\" align='center'>{getErrorText()}</Typography> \n                  </Stack>\n                </CardContent>\n                <CardActions>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => acknowledgeError()}>OK</Button>\n                </CardActions>\n              </>\n            }\n\n            {processing && !transaction && \n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"body2\" textAlign={'center'} >Loading She Blooms Collection...</Typography>  \n                  <Box sx={{ width: '100%' }}><LinearProgress /></Box>\n                </Stack>\n              </CardContent>\n            }\n\n            {processing && transaction && !transactionCompleted &&\n              <CardContent mt={2}>\n                <Stack spacing={2}>\n                  <Typography variant=\"h5\" color='primary' fontWeight='bold' align='center' >Processing Your Transaction</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >Your transaction has been submitted to the Ethereum Network and is waiting to be confirmed!</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >Your screen will automatically be refreshed when the transaction is completed. This may take up to 5 minutes to complete, so please be patient.</Typography>\n                  <Chip sx={{ fontSize: 9 }} label={transaction}/>\n                  <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth size=\"small\" onClick={() => openInNewTab(`https://${isTestNet() ? \"rinkeby.\" : \"\"}etherscan.io/tx/${transaction}`)}>View your transaction on EtherScan</Button>\n                  <Box mt={2} sx={{ width: '100%' }}><LinearProgress /></Box>\n                </Stack>\n              </CardContent>\n            }\n\n\n            {!processing && transactionCompleted && \n              <CardContent mt={2} sx={{ overflow: 'visible' }}>\n                <ConfettiExplosion />\n                <Stack spacing={2}>\n                  <Typography variant=\"h5\" color='primary' fontWeight='bold' align='center' >Congratulations!</Typography>\n                  <Typography variant=\"body2\" textAlign={'center'} >You transaction has been confirmed!</Typography>\n                  <Chip variant=\"outlined\" sx={{ fontSize: 9 }} label={transaction}/>\n                  <Button variant=\"outlined\" fullWidth size=\"small\" onClick={() => openInNewTab(`https://${isTestNet() ? \"rinkeby.\" : \"\"}etherscan.io/tx/${transaction}`)}>View your transaction on EtherScan</Button>\n                  <Button fullWidth sx={{ color: 'white'}} variant='contained' onClick={() => acknowledgeTransaction()}>OK</Button>\n                </Stack>\n              </CardContent>\n            }            \n\n            {/* COLLECTION INFORMATION */}\n            {!processing && isWalletConnected() && contractFound && !error && !transactionCompleted &&\n              <CardContent mt={2}>\n                <CollectionInfo values={values}/>\n              </CardContent>\n            }\n            \n            <Divider />\n\n            {/* MINTING CONTROLS */}\n            {!processing && isPurchaseEnabled() && !error && !transactionCompleted && \n              <CardContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={4} >\n                    <ButtonGroup variant=\"contained\">\n                      <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth onClick={() => decrementMintAmount()}>-</Button>\n                      <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth>{`${mintAmount}`}</Button>\n                      <Button variant=\"contained\" sx={{ color: 'white'}} fullWidth onClick={() => incrementMintAmount()}>+</Button>\n                    </ButtonGroup>\n                  </Grid>\n                  <Grid item xs={4} >\n                    <Typography mt={0.5} variant=\"body2\" align='center' fontSize={\"1rem\"} fontWeight={'bold'} color=\"primary\">\n                      {`${mintCost} ETH`}\n                    </Typography>\n                    <Typography mt={-0.5} align='center' fontSize={10}>\n                      (plus gas)\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Button fullWidth variant='contained' sx={{ color: 'white'}} onClick={() => mintTokens(mintAmount)} endIcon={<ArrowForwardIcon />}>Mint</Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            }\n\n          </Card>\n\n          {/* ADDITIONAL INFO/ALERT CARDS FOR VARIOUS CONDITIONS */}\n          \n          {!processing && values.isMintingPaused && contractFound &&\n            <MessageCard>\n              <Typography variant=\"body2\" color='primary' align='center'>This sale is closed. Please come back for our next sale!</Typography>\n            </MessageCard>   \n          }       \n\n          {!processing && isSoldOut() && contractFound &&\n            <MessageCard>\n              <Typography variant=\"body2\" color='primary' align='center'>Thank you for your support!</Typography>\n              <Typography variant=\"body2\" color='primary' align='center'>Our current sale is sold out, but please come back for our next sale!</Typography>\n              <Button variant=\"contained\" fullWidth sx={{ mt: 2}} onClick={() => openInNewTab(`https://${isTestNet() ? \"testnets.\" : \"\"}${CollectionConfig.openSeaURL}`)}>Buy She Blooms on OpenSea</Button>\n            </MessageCard>\n          }   \n\n          {!processing && !values.isReleased && isMainNet() && \n            <MessageCard>\n              <Typography variant=\"body2\" color='orange' align='center'>You are not connected to the Ethereum TestNet.</Typography>\n              <Typography variant=\"body2\" color='orange' align='center'>Please connect to continue...</Typography>\n            </MessageCard>\n          }       \n\n          {!processing && values.isReleased && !isMainNet() && \n            <MessageCard>\n              <Typography variant=\"body2\" color='orange' align='center'>You are not connected to the Ethereum MainNet.</Typography>\n              <Typography variant=\"body2\" color='orange' align='center'>Please connect to continue...</Typography>\n            </MessageCard>\n          }       \n\n        </Stack>\n      </Container>\n    </div>\n  </Container>\n    \n\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\nimport { createTheme } from '@mui/material/styles';\nimport { MoralisProvider } from \"react-moralis\";\nimport App from './Components/App/App';\nimport './index.css';\n\nconst appTheme = createTheme({ \n  palette: { \n    mode: 'light',\n    primary: {\n      main: '#42a5f5', \n    } \n  }\n});\n\nconst APP_ID = process.env.REACT_APP_MORALIS_APPLICATION_ID;\nconst SERVER_URL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={appTheme}>\n      <MoralisProvider appId={APP_ID} serverUrl={SERVER_URL}>\n        <App />\n      </MoralisProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import freelistAddresses from '../../Config/freelist.json';\nimport { MerkleTree } from 'merkletreejs';\nimport keccak256 from 'keccak256';\n\nexport default new class Freelist {\n  merkleTree\n\n  getMerkleTree()\n  {\n    if (this.merkleTree === undefined) {\n      const leafNodes = freelistAddresses.map(addr => keccak256(addr));\n      this.merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });\n    }\n    return this.merkleTree;\n  }\n\n  getProofForAddress(address)\n  {\n    return this.getMerkleTree().getHexProof(keccak256(address));\n  }\n\n  getRawProofForAddress(address)\n  {\n    return this.getProofForAddress(address).toString().replaceAll('\\'', '').replaceAll(' ', '');\n  }\n\n  contains(address)\n  {\n    return this.getMerkleTree().getLeafIndex(Buffer.from(keccak256(address))) >= 0;\n  }\n};","import goldlistAddresses from '../../Config/goldlist.json';\nimport { MerkleTree } from 'merkletreejs';\nimport keccak256 from 'keccak256';\n\nexport default new class Goldlist {\n  merkleTree\n\n  getMerkleTree()\n  {\n    if (this.merkleTree === undefined) {\n      const leafNodes = goldlistAddresses.map(addr => keccak256(addr));\n      this.merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });\n    }\n    return this.merkleTree;\n  }\n\n  getProofForAddress(address)\n  {\n    return this.getMerkleTree().getHexProof(keccak256(address));\n  }\n\n  getRawProofForAddress(address)\n  {\n    return this.getProofForAddress(address).toString().replaceAll('\\'', '').replaceAll(' ', '');\n  }\n\n  contains(address)\n  {\n    return this.getMerkleTree().getLeafIndex(Buffer.from(keccak256(address))) >= 0;\n  }\n};"],"sourceRoot":""}